"makefile"

CHECKING RULE: $(NAME)
-> Failing rule: Processing the rule 'all' twice in a row should result in nothing to be done
 




"basic tests"


FAILED TESTS:\n
# TEST NUMBER (TYPE OF ARG)
  INSTRUCTION();
  1. your function ft_printf
  2. unix function printf
     (returned value) -->written on stdout<--

# 0007
  ft_printf("%5%");
  1. (    3) -->%5%<--
  2. (    5) -->    %<--

# 0008
  ft_printf("%-5%");
  1. (    4) -->%-5%<--
  2. (    5) -->%    <--

# 0009
  ft_printf("%.0%");
  1. (    4) -->%.0%<--
  2. (    1) -->%<--

# 0011 (char *)
  ft_printf("%   %", "test");
  1. (    5) -->%   %<--
  2. (    1) -->%<--

# 0014 (int)
  ft_printf("%x", 0);
  1. (    0) --><--
  2. (    1) -->0<--

# 0015 (int)
  ft_printf("%X", 0);
  1. (    0) --><--
  2. (    1) -->0<--

# 0018 (int)
  ft_printf("%x", 4294967296);
  1. (    0) --><--
  2. (    1) -->0<--

# 0019 (int)
  ft_printf("%X", 4294967296);
  1. (    0) --><--
  2. (    1) -->0<--

# 0020 (int)
  ft_printf("%x", test);
  1. (    0) --><--
  2. (    1) -->0<--

# 0025 (int)
  ft_printf("%hx", 4294967296);
  1. (    0) --><--
  2. (    1) -->0<--

# 0026 (int)
  ft_printf("%hhX", 4294967296);
  1. (    0) --><--
  2. (    1) -->0<--

# 0040 (int)
  ft_printf("%#x", 0);
  1. (    0) --><--
  2. (    1) -->0<--

# 0073 (NULL)
  ft_printf("@moulitest: %s", NULL);
includes/projects/ft_printf/ft_printf_main.sh: line 198: printf: includes/projects/ft_printf/ft_printf_main.sh: line 151: 67954 Segmentation fault: 11  ./tmp/ft_printf_s sN "@moulitest: %s" ""$: invalid number
  1. (    0) -->includes/projects/ft_printf/ft_printf_main.sh: line 151: 67954 Segmentation fault: 11  ./tmp/ft_printf_s sN "@moulitest: %s" "NULL"$<--
  2. (   18) -->@moulitest: (null)<--

# 0075 (NULL)
  ft_printf("%s %s", NULL, string);
includes/projects/ft_printf/ft_printf_main.sh: line 198: printf: includes/projects/ft_printf/ft_printf_main.sh: line 151: 68045 Segmentation fault: 11  ./tmp/ft_printf_s sN "%s %s" "" "string"$: invalid number
  1. (    0) -->includes/projects/ft_printf/ft_printf_main.sh: line 151: 68045 Segmentation fault: 11  ./tmp/ft_printf_s sN "%s %s" "NULL" "string"$<--
  2. (   13) -->(null) string<--

# 0077 (char)
  ft_printf("%5c", 42);
  1. (    1) -->*<--
  2. (    5) -->    *<--

# 0078 (char)
  ft_printf("%-5c", 42);
  1. (    1) -->*<--
  2. (    5) -->*    <--

# 0080 (char)
  ft_printf("%2c", 0);
  1. (    1) -->^@<--
  2. (    2) --> ^@<--

# 0092 (int)
  ft_printf("@moulitest: %o", 0);
  1. (   12) -->@moulitest: <--
  2. (   13) -->@moulitest: 0<--

# 0111 (int)
  ft_printf("%+d", 0);
  1. (    1) -->+<--
  2. (    2) -->+0<--

# 0113 (int)
  ft_printf("% +d", 42);
  1. (    3) --> 42<--
  2. (    3) -->+42<--

# 0115 (int)
  ft_printf("%+ d", 42);
  1. (    3) --> 42<--
  2. (    3) -->+42<--

# 0117 (int)
  ft_printf("%  +d", 42);
  1. (    3) --> 42<--
  2. (    3) -->+42<--

# 0119 (int)
  ft_printf("%+  d", 42);
  1. (    3) --> 42<--
  2. (    3) -->+42<--

# 0121 (int)
  ft_printf("% ++d", 42);
  1. (    3) --> 42<--
  2. (    3) -->+42<--

# 0123 (int)
  ft_printf("%++ d", 42);
  1. (    3) --> 42<--
  2. (    3) -->+42<--

# 0138 (short)
  ft_printf("%hd", −32768);
  1. (    0) --><--
  2. (    1) -->0<--

# 0140 (short)
  ft_printf("%hd", −32769);
  1. (    0) --><--
  2. (    1) -->0<--

# 0155 (ssize_t)
  ft_printf("%zd", -0);
  1. (    0) --><--
  2. (    1) -->0<--

# 0170 (int)
  ft_printf("%03.2d", 0);
  1. (    3) -->00^@<--
  2. (    3) --> 00<--

# 0171 (int)
  ft_printf("%03.2d", 1);
  1. (    3) -->01^@<--
  2. (    3) --> 01<--

# 0177 (unsigned int)
  ft_printf("%u", 0);
  1. (    0) --><--
  2. (    1) -->0<--

# 0181 (unsigned int)
  ft_printf("%u", 4294967296);
  1. (    0) --><--
  2. (    1) -->0<--
\n--------------\n
SUCCESS TESTS:\n
   1.      ft_printf("");                                -> ""
   2.      ft_printf("\\n");                             -> "\\n"
   3.      ft_printf("test");                            -> "test"
   4.      ft_printf("test\\n");                         -> "test\\n"
   5.      ft_printf("1234");                            -> "1234"
   6.      ft_printf("%%");                              -> "%"
   7. FAIL ft_printf("%5%");                             -> "    %"
   8. FAIL ft_printf("%-5%");                            -> "%    "
   9. FAIL ft_printf("%.0%");                            -> "%"
  10.      ft_printf("%%", "test");                      -> "%"
  11. FAIL ft_printf("%   %", "test");                   -> "%"
  12.      ft_printf("%x", 42);                          -> "2a"
  13.      ft_printf("%X", 42);                          -> "2A"
  14. FAIL ft_printf("%x", 0);                           -> "0"
  15. FAIL ft_printf("%X", 0);                           -> "0"
  16.      ft_printf("%x", -42);                         -> "ffffffd6"
  17.      ft_printf("%X", -42);                         -> "FFFFFFD6"
  18. FAIL ft_printf("%x", 4294967296);                  -> "0"
  19. FAIL ft_printf("%X", 4294967296);                  -> "0"
  20. FAIL ft_printf("%x", test);                        -> "0"
  21.      ft_printf("%10x", 42);                        -> "        2a"
  22.      ft_printf("%-10x", 42);                       -> "2a        "
  23.      ft_printf("%lx", 4294967296);                 -> "100000000"
  24.      ft_printf("%llX", 4294967296);                -> "100000000"
  25. FAIL ft_printf("%hx", 4294967296);                 -> "0"
  26. FAIL ft_printf("%hhX", 4294967296);                -> "0"
  27.      ft_printf("%jx", 4294967295);                 -> "ffffffff"
  28.      ft_printf("%jx", 4294967296);                 -> "100000000"
  29.      ft_printf("%jx", -4294967296);                -> "ffffffff00000000"
  30.      ft_printf("%jx", -4294967297);                -> "fffffffeffffffff"
  31.      ft_printf("%llx", 9223372036854775807);       -> "7fffffffffffffff"
  32.      ft_printf("%llx", 9223372036854775808);       -> "7fffffffffffffff"
  33.      ft_printf("%010x", 542);                      -> "000000021e"
  34.      ft_printf("%-15x", 542);                      -> "21e            "
  35.      ft_printf("%2x", 542);                        -> "21e"
  36.      ft_printf("%.2x", 5427);                      -> "1533"
  37.      ft_printf("%5.2x", 5427);                     -> " 1533"
  38.      ft_printf("%#x", 42);                         -> "0x2a"
  39.      ft_printf("%#llx", 9223372036854775807);      -> "0x7fffffffffffffff"
  40. FAIL ft_printf("%#x", 0);                          -> "0"
  41.      ft_printf("%#x", 42);                         -> "0x2a"
  42.      ft_printf("%#X", 42);                         -> "0X2A"
  43.      ft_printf("%#8x", 42);                        -> "    0x2a"
  44.      ft_printf("%#08x", 42);                       -> "0x00002a"
  45.      ft_printf("%#-08x", 42);                      -> "0x2a    "
  46.      ft_printf("@moulitest: %#.x %#.0x", 0, 0);    -> "@moulitest:  "
  47.      ft_printf("@moulitest: %.x %.0x", 0, 0);      -> "@moulitest:  "
  48.      ft_printf("@moulitest: %5.x %5.0x", 0, 0);    -> "@moulitest:            "
  49.      ft_printf("%s", "abc");                       -> "abc"
  50.      ft_printf("%s", "this is a string");          -> "this is a string"
  51.      ft_printf("%s ", "this is a string");         -> "this is a string "
  52.      ft_printf("%s  ", "this is a string");        -> "this is a string  "
  53.      ft_printf("this is a %s", "string");          -> "this is a string"
  54.      ft_printf("%s is a string", "this");          -> "this is a string"
  55.      ft_printf("Line Feed %s", "\\n");             -> "Line Feed \\n"
  56.      ft_printf("%10s is a string", "this");        -> "      this is a string"
  57.      ft_printf("%.2s is a string", "this");        -> "th is a string"
  58.      ft_printf("%5.2s is a string", "this");       -> "   th is a string"
  59.      ft_printf("%10s is a string", "");            -> "           is a string"
  60.      ft_printf("%.2s is a string", "");            -> " is a string"
  61.      ft_printf("%5.2s is a string", "");           -> "      is a string"
  62.      ft_printf("%-10s is a string", "this");       -> "this       is a string"
  63.      ft_printf("%-.2s is a string", "this");       -> "th is a string"
  64.      ft_printf("%-5.2s is a string", "this");      -> "th    is a string"
  65.      ft_printf("%-10s is a string", "");           -> "           is a string"
  66.      ft_printf("%-.2s is a string", "");           -> " is a string"
  67.      ft_printf("%-5.2s is a string", "");          -> "      is a string"
  68.      ft_printf("%s %s", "this", "is");             -> "this is"
  69.      ft_printf("%s %s %s", "this", "is", "a");     -> "this is a"
  70.      ft_printf("%s %s %s %s", "this", "is", "a", "multi"); -> "this is a multi"
  71.      ft_printf("%s %s %s %s string. gg!", "this", "is", "a", "multi", "string"); -> "this is a multi string. gg!"
  72.      ft_printf("%s%s%s%s%s", "this", "is", "a", "multi", "string"); -> "thisisamultistring"
  73. FAIL ft_printf("@moulitest: %s", NULL);            -> "@moulitest: (null)"
  74.      ft_printf("%.2c", NULL);                      -> "^@"
  75. FAIL ft_printf("%s %s", NULL, string);             -> "(null) string"
  76.      ft_printf("%c", 42);                          -> "*"
  77. FAIL ft_printf("%5c", 42);                         -> "    *"
  78. FAIL ft_printf("%-5c", 42);                        -> "*    "
  79.      ft_printf("@moulitest: %c", 0);               -> "@moulitest: ^@"
  80. FAIL ft_printf("%2c", 0);                          -> " ^@"
  81.      ft_printf("null %c and text", 0);             -> "null ^@ and text"
  82.      ft_printf("% c", 0);                          -> "^@"
  83.      ft_printf("%o", 40);                          -> "50"
  84.      ft_printf("%5o", 41);                         -> "   51"
  85.      ft_printf("%05o", 42);                        -> "00052"
  86.      ft_printf("%-5o", 2500);                      -> "4704 "
  87.      ft_printf("%#6o", 2500);                      -> " 04704"
  88.      ft_printf("%-#6o", 2500);                     -> "04704 "
  89.      ft_printf("%-05o", 2500);                     -> "4704 "
  90.      ft_printf("%-5.10o", 2500);                   -> "0000004704"
  91.      ft_printf("%-10.5o", 2500);                   -> "04704     "
  92. FAIL ft_printf("@moulitest: %o", 0);               -> "@moulitest: 0"
  93.      ft_printf("@moulitest: %.o %.0o", 0, 0);      -> "@moulitest:  "
  94.      ft_printf("@moulitest: %5.o %5.0o", 0, 0);    -> "@moulitest:            "
  95.      ft_printf("@moulitest: %#.o %#.0o", 0, 0);    -> "@moulitest: 0 0"
  96.      ft_printf("@moulitest: %.10o", 42);           -> "@moulitest: 0000000052"
  97.      ft_printf("%d", 1);                           -> "1"
  98.      ft_printf("the %d", 1);                       -> "the 1"
  99.      ft_printf("%d is one", 1);                    -> "1 is one"
 100.      ft_printf("%d", -1);                          -> "-1"
 101.      ft_printf("%d", 4242);                        -> "4242"
 102.      ft_printf("%d", -4242);                       -> "-4242"
 103.      ft_printf("%d", 2147483647);                  -> "2147483647"
 104.      ft_printf("%d", 2147483648);                  -> "-2147483648"
 105.      ft_printf("%d", -2147483648);                 -> "-2147483648"
 106.      ft_printf("%d", -2147483649);                 -> "2147483647"
 107.      ft_printf("% d", 42);                         -> " 42"
 108.      ft_printf("% d", -42);                        -> "-42"
 109.      ft_printf("%+d", 42);                         -> "+42"
 110.      ft_printf("%+d", -42);                        -> "-42"
 111. FAIL ft_printf("%+d", 0);                          -> "+0"
 112.      ft_printf("%+d", 4242424242424242424242);     -> "-1"
 113. FAIL ft_printf("% +d", 42);                        -> "+42"
 114.      ft_printf("% +d", -42);                       -> "-42"
 115. FAIL ft_printf("%+ d", 42);                        -> "+42"
 116.      ft_printf("%+ d", -42);                       -> "-42"
 117. FAIL ft_printf("%  +d", 42);                       -> "+42"
 118.      ft_printf("%  +d", -42);                      -> "-42"
 119. FAIL ft_printf("%+  d", 42);                       -> "+42"
 120.      ft_printf("%+  d", -42);                      -> "-42"
 121. FAIL ft_printf("% ++d", 42);                       -> "+42"
 122.      ft_printf("% ++d", -42);                      -> "-42"
 123. FAIL ft_printf("%++ d", 42);                       -> "+42"
 124.      ft_printf("%++ d", -42);                      -> "-42"
 125.      ft_printf("%0d", -42);                        -> "-42"
 126.      ft_printf("%00d", -42);                       -> "-42"
 127.      ft_printf("%5d", 42);                         -> "   42"
 128.      ft_printf("%05d", 42);                        -> "00042"
 129.      ft_printf("%0+5d", 42);                       -> "+0042"
 130.      ft_printf("%5d", -42);                        -> "  -42"
 131.      ft_printf("%05d", -42);                       -> "-0042"
 132.      ft_printf("%0+5d", -42);                      -> "-0042"
 133.      ft_printf("%-5d", 42);                        -> "42   "
 134.      ft_printf("%-05d", 42);                       -> "42   "
 135.      ft_printf("%-5d", -42);                       -> "-42  "
 136.      ft_printf("%-05d", -42);                      -> "-42  "
 137.      ft_printf("%hd", 32767);                      -> "32767"
 138. FAIL ft_printf("%hd", −32768);                   -> "0"
 139.      ft_printf("%hd", 32768);                      -> "-32768"
 140. FAIL ft_printf("%hd", −32769);                   -> "0"
 141.      ft_printf("%hhd", 127);                       -> "127"
 142.      ft_printf("%hhd", 128);                       -> "-128"
 143.      ft_printf("%hhd", -128);                      -> "-128"
 144.      ft_printf("%hhd", -129);                      -> "127"
 145.      ft_printf("%ld", 2147483647);                 -> "2147483647"
 146.      ft_printf("%ld", -2147483648);                -> "-2147483648"
 147.      ft_printf("%ld", 2147483648);                 -> "2147483648"
 148.      ft_printf("%ld", -2147483649);                -> "-2147483649"
 149.      ft_printf("%lld", 9223372036854775807);       -> "9223372036854775807"
 150.      ft_printf("%lld", -9223372036854775808);      -> "-9223372036854775808"
 151.      ft_printf("%jd", 9223372036854775807);        -> "9223372036854775807"
 152.      ft_printf("%jd", -9223372036854775808);       -> "-9223372036854775808"
 153.      ft_printf("%zd", 4294967295);                 -> "4294967295"
 154.      ft_printf("%zd", 4294967296);                 -> "4294967296"
 155. FAIL ft_printf("%zd", -0);                         -> "0"
 156.      ft_printf("%zd", -1);                         -> "-1"
 157.      ft_printf("%d", 1);                           -> "1"
 158.      ft_printf("%d %d", 1, -2);                    -> "1 -2"
 159.      ft_printf("%d %d %d", 1, -2, 33);             -> "1 -2 33"
 160.      ft_printf("%d %d %d %d", 1, -2, 33, 42);      -> "1 -2 33 42"
 161.      ft_printf("%d %d %d %d gg!", 1, -2, 33, 42, 0); -> "1 -2 33 42 gg!"
 162.      ft_printf("%4.15d", 42);                      -> "000000000000042"
 163.      ft_printf("%.2d", 4242);                      -> "4242"
 164.      ft_printf("%.10d", 4242);                     -> "0000004242"
 165.      ft_printf("%10.5d", 4242);                    -> "     04242"
 166.      ft_printf("%-10.5d", 4242);                   -> "04242     "
 167.      ft_printf("% 10.5d", 4242);                   -> "     04242"
 168.      ft_printf("%+10.5d", 4242);                   -> "    +04242"
 169.      ft_printf("%-+10.5d", 4242);                  -> "+04242    "
 170. FAIL ft_printf("%03.2d", 0);                       -> " 00"
 171. FAIL ft_printf("%03.2d", 1);                       -> " 01"
 172.      ft_printf("%03.2d", -1);                      -> "-01"
 173.      ft_printf("@moulitest: %.10d", -42);          -> "@moulitest: -0000000042"
 174.      ft_printf("@moulitest: %.d %.0d", 42, 43);    -> "@moulitest: 42 43"
 175.      ft_printf("@moulitest: %.d %.0d", 0, 0);      -> "@moulitest:  "
 176.      ft_printf("@moulitest: %5.d %5.0d", 0, 0);    -> "@moulitest:            "
 177. FAIL ft_printf("%u", 0);                           -> "0"
 178.      ft_printf("%u", 1);                           -> "1"
 179.      ft_printf("%u", -1);                          -> "4294967295"
 180.      ft_printf("%u", 4294967295);                  -> "4294967295"
 181. FAIL ft_printf("%u", 4294967296);                  -> "0"
 182.      ft_printf("%5u", 4294967295);                 -> "4294967295"
 183.      ft_printf("%15u", 4294967295);                -> "     4294967295"
 184.      ft_printf("%-15u", 4294967295);               -> "4294967295     "
 185.      ft_printf("%015u", 4294967295);               -> "000004294967295"
 186.      ft_printf("% u", 4294967295);                 -> "4294967295"
 187.      ft_printf("%+u", 4294967295);                 -> "4294967295"
 188.      ft_printf("%lu", 4294967295);                 -> "4294967295"
 189.      ft_printf("%lu", 4294967296);                 -> "4294967296"
 190.      ft_printf("%lu", -42);                        -> "18446744073709551574"
 191.      ft_printf("%llu", 4999999999);                -> "4999999999"
 192.      ft_printf("%ju", 4999999999);                 -> "4999999999"
 193.      ft_printf("%ju", 4294967296);                 -> "4294967296"
 194.      ft_printf("%U", 4294967295);                  -> "4294967295"
 195.      ft_printf("%hU", 4294967296);                 -> "4294967296"
 196.      ft_printf("%U", 4294967296);                  -> "4294967296"
 197.      ft_printf("@moulitest: %.5u", 42);            -> "@moulitest: 00042"


"moulitest"


>>>> Tests for ft_printf
Source: github.com/yyang42/moulitest
Legend: (.) Ok / (F) Fail / (S) Segfault / (B) Bus error / (T) Timeout / (A) Abort

[ -------STARTING ALL UNIT TESTS------- ]
>>>> 00_no_conv.spec.c ----------- [Ok !] ....
>>>> 01_conv_s_simple.spec.c ----- [FAIL] ....S. [SEGV] null_string -> (null)
>>>> 02_conv_s_multiple.spec.c --- [Ok !] ...
>>>> 03_conv_d.spec.c ------------ [Ok !] .......
>>>> 04_conv_p.spec.c ------------ [FAIL] ....F [FAIL] test_zero -> printf("%p", 0)
>>>> 05_percent_escape.spec.c ---- [FAIL] ....FFFF [FAIL] test_modulo_without_valid_specifier -> printf("%")
>>>> 06_mix_sdp_percent.spec.c --- [Ok !] ..
>>>> 07_conv_S.spec.c ------------ [FAIL] ....S [SEGV] nullWideString -> (null)
>>>> 08_conv_D.spec.c ------------ [FAIL] F... [FAIL] test_simple -> printf("%D", 0L)
>>>> 09_conv_i.spec.c ------------ [Ok !] .....
>>>> 10_conv_o.spec.c ------------ [FAIL] ...F [FAIL] test_many_octals_with_strings -> printf("a%ob%oc%od", 0, 55555, 100000)
>>>> 11_conv_O.spec.c ------------ [FAIL] ...F. [FAIL] test_many_long_octals_with_strings -> printf("a%Ob%Oc%Od", 0, 55555, 100000)
>>>> 12_conv_u.spec.c ------------ [FAIL] ...F. [FAIL] test_many_uints_with_strings -> printf("a%ub%uc%ud", 0, 55555, 100000)
>>>> 13_conv_U.spec.c ------------ [Ok !] ...
>>>> 14_conv_x.spec.c ------------ [FAIL] ...FF [FAIL] test_many_hexs_with_strings -> printf("a%xb%xc%xd", 0, 55555, 100000)
>>>> 15_conv_X.spec.c ------------ [FAIL] ...FF [FAIL] test_many_hexs_with_strings -> printf("a%Xb%Xc%Xd", 0, 55555, 100000)
>>>> 16_conv_c.spec.c ------------ [Ok !] ....
>>>> 17_conv_C.spec.c ------------ [Ok !] .........
>>>> 18_mix_all_previous.spec.c -- [Ok !] ..
>>>> 40_length_modif_l.spec.c ---- [FAIL] F....F....FFFF..FFF [FAIL] test_ld_simple -> printf("%ld%ld", 0, 42)
>>>> 41_length_modif_ll.spec.c --- [FAIL] F..F..FFFFFFF [FAIL] test_lld_simple -> printf("%lld%lld", 0, 42)
>>>> 42_length_modif_h.spec.c ---- [FAIL] F..F..FFFFFFF [FAIL] test_hd_simple -> printf("%hd%hd", (short int)0, (short int)42)
>>>> 43_length_modif_hh.spec.c --- [FAIL] .....F....FFFFFFFFFFF.S [FAIL] test_hhi_simple -> printf("%hhi%hhi", 0, 42)
>>>> 43_length_modif_j.spec.c ---- [FAIL] F..F..FFFFFFF [FAIL] test_jd_simple -> printf("%jd%jd", 0, 42)
>>>> 44_length_modif_z.spec.c ---- [FAIL] F.F.FFFFFFF [FAIL] test_zd_simple -> printf("%zd%zd", 0, 42)
>>>> 45_length_modif_edge_cases.sp [Ok !] .
>>>> 50_min_width.spec.c --------- [FAIL] ....FFF..F.. [FAIL] min_width_c -> printf("{%3c}", 0)
>>>> 51_min_width_flag_minus.spec. [Ok !] ...
>>>> 52_min_width_flag_zero.spec.c [FAIL] ......FFFF. [FAIL] char_posMinWidth_zeroFlag -> printf("{%03c}", 0)
>>>> 53_min_width_non_valid_conv.s [FAIL] F [FAIL] nonValidConv_negativeMinWidth -> printf("{%-15Z}", 123)
>>>> 60_flag_sharp.spec.c -------- [FAIL] .....F..F.. [FAIL] test_hex_zero -> printf("%#x", 0)
>>>> 61_flag_plus.spec.c --------- [FAIL] ......F.F.S.. [FAIL] test_plus_o_zero -> printf("%+o", 0)
>>>> 62_flag_space.spec.c -------- [FAIL] .......S....S.. [SEGV] sNullString_spaceFlag -> (null)
>>>> 69_flag_mix.spec.c ---------- [FAIL] FF..F..F. [FAIL] positiveDigit_flagsSpacePlus_spaceFirst -> printf("{% +d}", 42)
>>>> 70_precision_for_diu.spec.c - [Ok !] ..............................
>>>> 71_precision_for_oOxX.spec.c  [Ok !] ...............................
>>>> 72_precision_for_sS.spec.c -- [Ok !] ..............
>>>> 73_precision_for_cC.spec.c -- [Ok !] ......
>>>> 74_precision_for_p.spec.c --- [FAIL] FF.... [FAIL] pNullPointer_zeroPrecision -> printf("%.0p, %.p", 0, 0)
>>>> 75_precision_for_percent.spec [FAIL] F [FAIL] percent_point3precision -> printf("%.3%")
>>>> 79_precision_mixed_with_flags [FAIL] ..FFSFF..F [FAIL] test_precision_p_zero -> printf("%.p, %.0p", 0, 0)
>>>> 90_incomptbl_values_sdpi.spec [Ok !] ....
>>>> 91_incomptbl_values_uUSDcC.sp [FAIL] .FF... [FAIL] test_unsigned_max_plus_one -> printf("%u", UINT_MAX + 1)
>>>> 92_incomptbl_values_oOxX.spec [Ok !] .......
>>>> bonus_01_wildcard.spec.c ---- [FAIL] FFFFFFFFFFFFF [FAIL] wildcard_for_min_width_positive -> printf("%*d", 5, 42)
>>>> bonus_02_wildcard_multi.spec. [FAIL] F [FAIL] wildcard_for_min_width_positive -> printf("%*.*d", 0, 3, 0)
>>>> bonus_03_wildcard_flag_mix.sp [FAIL] FFFF [FAIL] digit_wildcard_and_min_width_value1 -> printf("{%3*d}", 0, 0)
>>>> bonus_10_conv_fF.spec.c ----- [FAIL] FFFF [FAIL] simple_small_nbr -> printf("{%f}{%F}", 1.42, 1.42)
[ ----------END OF UNIT TESTS---------- ]

>>>> Result: 17/48 test suites passed. 270/396 tests passed (dots).



"undefined  results tests"


FAILED TESTS:\n
# TEST NUMBER (TYPE OF ARG)
  INSTRUCTION();
  1. your function ft_printf
  2. unix function printf
     (returned value) -->written on stdout<--

# 0001
  ft_printf("%");
  1. (    1) -->%<--
  2. (    0) --><--

# 0002
  ft_printf("% ");
  1. (    2) -->% <--
  2. (    0) --><--

# 0003
  ft_printf("% h");
  1. (    3) -->% h<--
  2. (    0) --><--

# 0004
  ft_printf("%Z");
  1. (    2) -->%Z<--
  2. (    1) -->Z<--

# 0005
  ft_printf("% hZ");
  1. (    4) -->% hZ<--
  2. (    1) -->Z<--

# 0006
  ft_printf("%05%");
  1. (    4) -->%05%<--
  2. (    5) -->0000%<--

# 0007
  ft_printf("%-05%");
  1. (    5) -->%-05%<--
  2. (    5) -->%    <--

# 0008
  ft_printf("% hZ%");
  1. (    5) -->% hZ%<--
  2. (    1) -->Z<--

# 0009 (char *)
  ft_printf("% Z", "test");
  1. (    3) -->% Z<--
  2. (    1) -->Z<--

# 0010 (char *)
  ft_printf("% Z ", "test");
  1. (    4) -->% Z <--
  2. (    2) -->Z <--

# 0011 (char *)
  ft_printf("% Z%s", "test");
  1. (    7) -->% Ztest<--
  2. (    5) -->Ztest<--

# 0012 (char *)
  ft_printf("%000   %", "test");
  1. (    8) -->%000   %<--
  2. (    1) -->%<--

# 0013 (char *)
  ft_printf("%%%", "test");
  1. (    2) -->%%<--
  2. (    1) -->%<--

# 0014 (char *)
  ft_printf("%%   %", "test");
  1. (    5) -->%   %<--
  2. (    4) -->%   <--

# 0015 (int)
  ft_printf("%ll#x", 9223372036854775807);
  1. (    5) -->%ll#x<--
  2. (   18) -->0x7fffffffffffffff<--

# 0016 (char *)
  ft_printf("%010s is a string", "this");
  1. (   22) -->      this is a string<--
  2. (   22) -->000000this is a string<--

# 0018 (char)
  ft_printf("%05c", 42);
  1. (    1) -->*<--
  2. (    5) -->0000*<--

# 0019 (int)
  ft_printf("% Z", 42);
  1. (    3) -->% Z<--
  2. (    1) -->Z<--

# 0024 (int)
  ft_printf("%5+d", 42);
  1. (    4) -->%5+d<--
  2. (    5) -->  +42<--

# 0025 (int)
  ft_printf("%5+d", -42);
  1. (    4) -->%5+d<--
  2. (    5) -->  -42<--

# 0026 (int)
  ft_printf("%-5+d", 42);
  1. (    5) -->%-5+d<--
  2. (    5) -->+42  <--

# 0028 (int)
  ft_printf("%-5+d", -42);
  1. (    5) -->%-5+d<--
  2. (    5) -->-42  <--

# 0030 (size_t)
  ft_printf("%zhd", 4294967296);
  1. (    4) -->%zhd<--
  2. (   10) -->4294967296<--

# 0031 (unsigned long long)
  ft_printf("%jzd", 9223372036854775807);
  1. (    4) -->%jzd<--
  2. (   19) -->9223372036854775807<--

# 0032 (unsigned long long)
  ft_printf("%jhd", 9223372036854775807);
  1. (    4) -->%jhd<--
  2. (   19) -->9223372036854775807<--

# 0033 (unsigned long long)
  ft_printf("%lhl", 9223372036854775807);
  1. (    4) -->%lhl<--
  2. (    0) --><--

# 0034 (unsigned long long)
  ft_printf("%lhlz", 9223372036854775807);
  1. (    5) -->%lhlz<--
  2. (    0) --><--

# 0035 (unsigned long long)
  ft_printf("%zj", 9223372036854775807);
  1. (    3) -->%zj<--
  2. (    0) --><--

# 0036 (unsigned long)
  ft_printf("%lhh", 2147483647);
  1. (    4) -->%lhh<--
  2. (    0) --><--

# 0037 (unsigned long)
  ft_printf("%hhld", 128);
  1. (    5) -->%hhld<--
  2. (    3) -->128<--

# 0038 (int)
  ft_printf("@main_ftprintf: %####0000 33..1..#00d\\n", 256);
  1. (   39) -->@main_ftprintf: %####0000 33..1..#00d\\n<--
  2. (   51) -->@main_ftprintf:                               256\\n<--

# 0039 (int)
  ft_printf("@main_ftprintf: %####0000 33..1d", 256);
  1. (   32) -->@main_ftprintf: %####0000 33..1d<--
  2. (   49) -->@main_ftprintf:                               256<--

# 0040 (int)
  ft_printf("@main_ftprintf: %###-#0000 33...12..#0+0d", 256);
  1. (   41) -->@main_ftprintf: %###-#0000 33...12..#0+0d<--
  2. (   49) -->@main_ftprintf: +256                             <--
\n--------------\n
SUCCESS TESTS:\n
   1. FAIL ft_printf("%");                               -> ""
   2. FAIL ft_printf("% ");                              -> ""
   3. FAIL ft_printf("% h");                             -> ""
   4. FAIL ft_printf("%Z");                              -> "Z"
   5. FAIL ft_printf("% hZ");                            -> "Z"
   6. FAIL ft_printf("%05%");                            -> "0000%"
   7. FAIL ft_printf("%-05%");                           -> "%    "
   8. FAIL ft_printf("% hZ%");                           -> "Z"
   9. FAIL ft_printf("% Z", "test");                     -> "Z"
  10. FAIL ft_printf("% Z ", "test");                    -> "Z "
  11. FAIL ft_printf("% Z%s", "test");                   -> "Ztest"
  12. FAIL ft_printf("%000   %", "test");                -> "%"
  13. FAIL ft_printf("%%%", "test");                     -> "%"
  14. FAIL ft_printf("%%   %", "test");                  -> "%   "
  15. FAIL ft_printf("%ll#x", 9223372036854775807);      -> "0x7fffffffffffffff"
  16. FAIL ft_printf("%010s is a string", "this");       -> "000000this is a string"
  17.      ft_printf("%-010s is a string", "this");      -> "this       is a string"
  18. FAIL ft_printf("%05c", 42);                        -> "0000*"
  19. FAIL ft_printf("% Z", 42);                         -> "Z"
  20.      ft_printf("%0 d", 42);                        -> " 42"
  21.      ft_printf("%0 d", -42);                       -> "-42"
  22.      ft_printf("% 0d", 42);                        -> " 42"
  23.      ft_printf("% 0d", -42);                       -> "-42"
  24. FAIL ft_printf("%5+d", 42);                        -> "  +42"
  25. FAIL ft_printf("%5+d", -42);                       -> "  -42"
  26. FAIL ft_printf("%-5+d", 42);                       -> "+42  "
  27.      ft_printf("%-0+5d", 42);                      -> "+42  "
  28. FAIL ft_printf("%-5+d", -42);                      -> "-42  "
  29.      ft_printf("%-0+5d", -42);                     -> "-42  "
  30. FAIL ft_printf("%zhd", 4294967296);                -> "4294967296"
  31. FAIL ft_printf("%jzd", 9223372036854775807);       -> "9223372036854775807"
  32. FAIL ft_printf("%jhd", 9223372036854775807);       -> "9223372036854775807"
  33. FAIL ft_printf("%lhl", 9223372036854775807);       -> ""
  34. FAIL ft_printf("%lhlz", 9223372036854775807);      -> ""
  35. FAIL ft_printf("%zj", 9223372036854775807);        -> ""
  36. FAIL ft_printf("%lhh", 2147483647);                -> ""
  37. FAIL ft_printf("%hhld", 128);                      -> "128"
  38. FAIL ft_printf("@main_ftprintf: %####0000 33..1..#00d\\n", 256); -> "@main_ftprintf:                               256\\n"
  39. FAIL ft_printf("@main_ftprintf: %####0000 33..1d", 256); -> "@main_ftprintf:                               256"
  40. FAIL ft_printf("@main_ftprintf: %###-#0000 33...12..#0+0d", 256); -> "@main_ftprintf: +256                             "
