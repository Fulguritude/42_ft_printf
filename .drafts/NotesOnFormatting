• Votre fonction s’appelera ft_printf et sera prototypée de la même façon que printf. (DONE)
• Vous ne ferez pas la gestion de buffer présente dans la fonction printf de la librairie C. (DONE)
• Vous devez gérer les conversions suivantes : sSpdDioOuUxXcC
	Conversion specifiers
       A  character  that  specifies  the  type of conversion to be applied.  The conversion specifiers and
       their meanings are:

       d, i   The int argument is converted to signed decimal notation.  The precision, if any,  gives  the
              minimum  number  of digits that must appear; if the converted value requires fewer digits, it
              is padded on the left with zeros.  The default precision is 1.  When 0  is  printed  with  an
              explicit precision 0, the output is empty.

       o, u, x, X
              The  unsigned  int  argument  is  converted  to  unsigned octal (o), unsigned decimal (u), or
              unsigned hexadecimal (x and X) notation.  The letters abcdef are used for x conversions;  the
              letters  ABCDEF  are used for X conversions.  The precision, if any, gives the minimum number
              of digits that must appear; if the converted value requires fewer digits, it is padded on the
              left  with  zeros.  The default precision is 1.  When 0 is printed with an explicit precision
              0, the output is empty.

       c      If no l modifier is present, the int argument is converted  to  an  unsigned  char,  and  the
              resulting  character  is  written.   If an l modifier is present, the wint_t (wide character)
              argument is converted to a multibyte sequence by a call to the wcrtomb(3)  function,  with  a
              conversion  state  starting in the initial state, and the resulting multibyte string is writ‐
              ten.

       s      If no l modifier is present: The const char * argument is expected to  be  a  pointer  to  an
              array  of  character type (pointer to a string).  Characters from the array are written up to
              (but not including) a terminating null byte ('\0'); if a precision is specified, no more than
              the  number specified are written.  If a precision is given, no null byte need be present; if
              the precision is not specified, or is greater than the size of the array, the array must con‐
              tain a terminating null byte.

              If  an  l modifier is present: The const wchar_t * argument is expected to be a pointer to an
              array of wide characters.  Wide characters from the array are converted to multibyte  charac‐
              ters (each by a call to the wcrtomb(3) function, with a conversion state starting in the ini‐
              tial state before the first wide character), up to and  including  a  terminating  null  wide
              character.  The resulting multibyte characters are written up to (but not including) the ter‐
              minating null byte.  If a precision is specified, no more bytes than the number specified are
              written, but no partial multibyte characters are written.  Note that the precision determines
              the number of bytes written, not the number of wide  characters  or  screen  positions.   The
              array  must  contain a terminating null wide character, unless a precision is given and it is
              so small that the number of bytes written exceeds it before the end of the array is reached.

       C      (Not in C99 or C11, but in SUSv2, SUSv3, and SUSv4.)  Synonym for lc.  Don't use.

       S      (Not in C99 or C11, but in SUSv2, SUSv3, and SUSv4.)  Synonym for ls.  Don't use.

       p      The void * pointer argument is printed in hexadecimal (as if by %#x or %#lx).

	   D, O, U ?


• Vous devez gérer le %%
      A '%' is written.  No argument is converted.  The complete conversion specification is '%%'.

• Vous devez gérer les flags #0-+ et espace
	The character % is followed by zero or more of the following flags:

       #      The value should be converted to an "alternate form".  For o conversions, the first character
              of the output string is made zero (by prefixing a 0 if it was not zero already).  For x and X
              conversions,  a  nonzero  result has the string "0x" (or "0X" for X conversions) prepended to
              it.  For a, A, e, E, f, F, g, and G conversions, the result will  always  contain  a  decimal
              point, even if no digits follow it (normally, a decimal point appears in the results of those
              conversions only if a digit follows).  For g  and  G  conversions,  trailing  zeros  are  not
              removed  from  the  result  as they would otherwise be.  For other conversions, the result is
              undefined.

       0      The value should be zero padded.  For d, i, o, u, x, X, a, A, e, E, f, F, g,  and  G  conver‐
              sions, the converted value is padded on the left with zeros rather than blanks.  If the 0 and
              - flags both appear, the 0 flag is ignored.  If a precision is given with a  numeric  conver‐
              sion  (d,  i, o, u, x, and X), the 0 flag is ignored.  For other conversions, the behavior is
              undefined.

       -      The converted value is to be left adjusted on the field boundary.  (The default is right jus‐
              tification.)  The converted value is padded on the right with blanks, rather than on the left
              with blanks or zeros.  A - overrides a 0 if both are given.

       ' '    (a space) A blank should be left before a positive number (or empty  string)  produced  by  a
              signed conversion.

       +      A  sign (+ or -) should always be placed before a number produced by a signed conversion.  By
              default, a sign is used only for negative numbers.  A + overrides a space if both are used.

• Vous devez gérer la taille minimum du champ
Field width
       An optional decimal digit string (with nonzero first digit) specifying a minimum  field  width.   If
       the  converted value has fewer characters than the field width, it will be padded with spaces on the
       left (or right, if the left-adjustment flag has been given).  Instead of a decimal digit string  one
       may  write "*" or "*m$" (for some decimal integer m) to specify that the field width is given in the
       next argument, or in the m-th argument, respectively, which must be of type int.  A  negative  field
       width  is  taken as a '-' flag followed by a positive field width.  In no case does a nonexistent or
       small field width cause truncation of a field; if the result of a conversion is wider than the field
       width, the field is expanded to contain the conversion result.

• Vous devez gérer la précision
 Precision
       An  optional precision, in the form of a period ('.')  followed by an optional decimal digit string.
       Instead of a decimal digit string one may write "*" or "*m$" (for some decimal integer m) to specify
       that  the precision is given in the next argument, or in the m-th argument, respectively, which must
       be of type int.  If the precision is given as just '.', the precision is taken to be zero.  A  nega‐
       tive  precision  is taken as if the precision were omitted.  This gives the minimum number of digits
       to appear for d, i, o, u, x, and X conversions, the number of digits to appear after the radix char‐
       acter  for  a,  A,  e, E, f, and F conversions, the maximum number of significant digits for g and G
       conversions, or the maximum number of characters to be printed from a string for  s  and  S  conver‐
       sions.

• Vous devez gérer les flags hh h l ll j z
 Length modifier
       Here, "integer conversion" stands for d, i, o, u, x, or X conversion.

       hh     A following integer conversion corresponds to a signed char or unsigned char argument, or a
              following n conversion corresponds to a pointer to a signed char argument.

       h      A following integer conversion corresponds to a short int or unsigned short int argument,  or
              a following n conversion corresponds to a pointer to a short int argument.

       l      (ell) A following integer conversion corresponds to a long int or unsigned long int argument,
              or a following n conversion corresponds to a pointer to a long int argument, or a following c
              conversion  corresponds  to  a  wint_t argument, or a following s conversion corresponds to a
              pointer to wchar_t argument.

       ll     (ell-ell).  A following integer conversion corresponds to a long long int  or  unsigned  long
              long  int  argument,  or a following n conversion corresponds to a pointer to a long long int
              argument.

       j      A following integer conversion corresponds to an intmax_t or uintmax_t argument, or a follow‐
              ing n conversion corresponds to a pointer to an intmax_t argument.

       z      A following integer conversion corresponds to a size_t or ssize_t argument, or a following  n
              conversion corresponds to a pointer to a size_t argument.




• Votre projet doit être à la Norme.
• Vous devez gérer les erreurs de façon sensible. En aucun cas votre programme ne
doit quitter de façon inattendue (Segmentation fault, etc...)
• Vous devez fournir un Makefile qui compilera une libftprintf.a. Cette lib sera linké
à notre main de test pour vous donner votre résultat.

• Vous avez le droit d’utiliser les fonctions suivantes :
-write
-malloc
-free
-exit
-les fonctions du man 3 stdarg (va_start, va_arg, va_end)


RETURN VALUE
       Upon  successful return, these functions return the number of characters printed (excluding the null
       byte used to end output to strings).
       If an output error is encountered, a negative value is returned.





BONUS:
• Gestion de conversions plus délicates : eE, fF, gG, aA, n.
       e, E   The double argument is rounded and converted in the style [-]d.ddde±dd  where  there  is  one
              digit  before  the  decimal-point character and the number of digits after it is equal to the
              precision; if the precision is missing, it is taken as 6; if the precision is zero, no  deci‐
              mal-point  character appears.  An E conversion uses the letter E (rather than e) to introduce
              the exponent.  The exponent always contains at least two digits; if the value  is  zero,  the
              exponent is 00.

       f, F   The  double  argument  is  rounded and converted to decimal notation in the style [-]ddd.ddd,
              where the number of digits after the decimal-point character is equal to the precision speci‐
              fication.   If  the  precision  is  missing, it is taken as 6; if the precision is explicitly
              zero, no decimal-point character appears.  If a decimal point appears,  at  least  one  digit
              appears before it.

              (SUSv2  does not know about F and says that character string representations for infinity and
              NaN may be made available.  SUSv3 adds a specification for F.   The  C99  standard  specifies
              "[-]inf" or "[-]infinity" for infinity, and a string starting with "nan" for NaN, in the case
              of f conversion, and "[-]INF" or "[-]INFINITY" or "NAN*" in the case of F conversion.)

       g, G   The double argument is converted in style f or e (or F or E for G conversions).   The  preci‐
              sion  specifies  the number of significant digits.  If the precision is missing, 6 digits are
              given; if the precision is zero, it is treated as 1.  Style e is used if  the  exponent  from
              its conversion is less than -4 or greater than or equal to the precision.  Trailing zeros are
              removed from the fractional part of the result; a decimal point appears only if  it  is  fol‐
              lowed by at least one digit.

       a, A   (C99; not in SUSv2, but added in SUSv3) For a conversion, the double argument is converted to
              hexadecimal notation (using the letters abcdef) in the style [-]0xh.hhhhp±; for A  conversion
              the  prefix 0X, the letters ABCDEF, and the exponent separator P is used.  There is one hexa‐
              decimal digit before the decimal point, and the number of digits after it  is  equal  to  the
              precision.   The  default  precision  suffices for an exact representation of the value if an
              exact representation in base 2 exists and otherwise is sufficiently large to distinguish val‐
              ues of type double.  The digit before the decimal point is unspecified for nonnormalized num‐
              bers, and nonzero but otherwise unspecified for normalized numbers.

       n      The number of characters written so far is stored into the integer pointed to by  the  corre‐
              sponding  argument.   That  argument  shall  be  an  int *, or variant whose size matches the
              (optionally) supplied integer length modifier.  No argument is converted.   The  behavior  is
              undefined if the conversion specification includes any flags, a field width, or a precision.

• Gestion de flags plus delicats : *, $, L, ’ .

       L      A following a, A, e, E, f, F, g, or G conversion corresponds to a long double argument.  (C99
              allows %LF, but SUSv2 does not.)  This is a synonym for ll.
       '      For  decimal  conversion  (i,  d,  u, f, F, g, G) the output is to  be grouped with thousands'
              grouping characters if the locale information indicates any.   Note  that  many  versions  of
              gcc(1)  cannot  parse  this option and will issue a warning.
 
• Gestion de flags non existants : %b pour afficher en binaire, %r pour afficher une
chaine avec des caractères non imprimables, %k pour afficher une date à un format
ISO quelconque, etc.

• Gestion de modifieurs pour gérer les couleurs, les fd ou des choses fun comme ça :)
printf("Le fichier {cyan}%s{eoc} contient : {red}%s{eoc}", filename, str)






Mandatory:
hh h l ll j z
#0-+ et espace
%.5d etc (la "précision")
%%
sSpdDioOuUxXcC

Optional:
eE, fF, gG, aA, n
*, $, L, ’ 
%r, %b, %k
color or file desc management




ar -M <<EOM
    CREATE libab.a
    ADDLIB liba.a
    ADDLIB libb.a
    SAVE
    END
EOM
ranlib libab.a




Taking care of fractions

ex: arbitrary abstract float (after mantissa and exp are dealt with): 0.0101 (in base 2)
0.0101 = 1/4 + 1/16; in decimal 0.3125 => note that 4 digits after '.' in binary is also 4 digits after '.' in decimal since 10 = 5 * 2 and so 1/10^n = 1/2^n * 1/5^n.
frac = "0101", 4 digits
(conversion of frac to frac_vlq)
(as vlq) 0101 * 10^4 = 1100001101010000, 4 zeros (10^4[10] is 10011100010000[2])
bitshift right 4
110000110101 to decim_str = "3215" 

BUT WAIT

ex2 : 0.000011011, 9 frac_digits.
0.000011011 = 1/32 + 1/64 + 1/256 + 1/512 = 0,052734375

0.000011011[2] * 10^9 = sigdits_as_uint
<=>
(11011[2] / 2^9) * 10^9 = sigdits_as_uint
<=>
(11011[2] * 10^9) / 2^9 = sigdits_as_uint
<=>
(11011[2] * 10^9) >> 9 = (27[10]) * 5^9 = 52734375 = sigdits_as_uint
  (operations for vlq) |  (in decimal)  | result
=>
padleft ('0', 9 - strlen("52734375") = "052734375" (extra step compared to ex1)






log10(10^x) = x
log10(e^x*ln(10)) = x
ln(10) * x * log10(e) = x
log10(e) = 1 / ln(10)
log10(e) = ln(e) / ln(10)


a * 2 ^ e2 = b * 10 ^ e10
=>ln(a) + e2 * ln(2) = ln(b) + e10 * ln(10)
e10 = (e2 * ln(2) + ln(a) - ln(b))/ln(10)
e10 = e2 * log10(2) + log10(a) - log10(b)
where a and b are the respective value of the mantissa of the number in each form (a is base 2, b is base 10). The reason these two values are different is because of the offset during exponent conversion (think of the approximation 10^3 and 2^10: it isn't perfect, and there is no power pair (safe for (0,0)) for which 10^x and 2^y can be equal, log10(a) - log10(b) represents this error in a sense).
